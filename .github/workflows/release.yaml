---
name: 'Release static libraries'
on:
  push:
    tags:
      - '**'

  workflow_dispatch:
    inputs:
      tag:
        description: 'release prefix'
        default: 'rc'
        required: true


permissions:
  contents: write # needed to write releases
  id-token: write # needed for keyless signing

jobs:

  linux-x86_64-all-libs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build static libraries - libgit2 compiled with libssh2 and openssl
        run: |
          TARGET_DIR=${GITHUB_WORKSPACE}/build/libgit2-linux-all-libs \
          BUILD_ROOT_DIR=${GITHUB_WORKSPACE}/libgit2/build/amd \
          ./hack/static.sh all
          
          mkdir -p ./libgit2-linux-all-libs/
          mv ${GITHUB_WORKSPACE}/build/libgit2-linux-all-libs/include ./libgit2-linux-all-libs/
          mv ${GITHUB_WORKSPACE}/build/libgit2-linux-all-libs/share ./libgit2-linux-all-libs/
          mv ${GITHUB_WORKSPACE}/build/libgit2-linux-all-libs/lib ./libgit2-linux-all-libs/
          mv ${GITHUB_WORKSPACE}/build/libgit2-linux-all-libs/lib64 ./libgit2-linux-all-libs/

          tar -zcvf linux-x86_64-all-libs.tar.gz libgit2-linux-all-libs
          rm -rf ${GITHUB_WORKSPACE}/build ${GITHUB_WORKSPACE}/libgit2
      - uses: actions/upload-artifact@v3
        with:
          name: release-artifact
          path: '*.tar.gz'
          if-no-files-found: error

  linux-x86_64-libgit2-only:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build static libraries - libgit2 only
        run: |
          TARGET_DIR=${GITHUB_WORKSPACE}/build/build_libgit2_only \
          BUILD_ROOT_DIR=${GITHUB_WORKSPACE}/libgit2/build/amd \
          ./hack/static.sh build_libgit2_only

          mkdir -p ./linux-libgit2-only/
          mv ${GITHUB_WORKSPACE}/build/build_libgit2_only/include ./linux-libgit2-only/
          mv ${GITHUB_WORKSPACE}/build/build_libgit2_only/lib ./linux-libgit2-only/

          tar -zcvf linux-x86_64-libgit2-only.tar.gz linux-libgit2-only
          rm -rf ${GITHUB_WORKSPACE}/build ${GITHUB_WORKSPACE}/libgit2
      - uses: actions/upload-artifact@v3
        with:
          name: release-artifact
          path: '*.tar.gz'
          if-no-files-found: error

  darwin-all-libs:
    # This job builds and releases "universal libraries" that are
    # supported by both darwin-amd64 and darwin-arm64.
    #
    # First builds in amd64, then cross-compile in arm64. Later combining
    # both outcomes onto a single binary for each static library.
    #
    # `macos-11` has been picked as support for arm64 was only added on Xcode 12.
    # Although some minor versions of Catalina 10.15 can support it, at the time 
    # of testing, GitHub's macos-10.15 did not seem to. 
    # Cross-compiling to arm64 on that runner consistently failed.
    runs-on: macos-11
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build universal static libraries for Darwin - libgit2 compiled with libssh2 and openssl
        run: |
          # The amd64 is used as base, using the target dir name (darwin-all-libs)
          # instead of the platform specific one, removes the need of replacing the
          # path in the .pc files.
          TARGET_DIR=${GITHUB_WORKSPACE}/build/darwin-all-libs \
          BUILD_ROOT_DIR=${GITHUB_WORKSPACE}/libgit2/build/amd \
          ./hack/static.sh all
          
          TARGET_DIR=${GITHUB_WORKSPACE}/build/libgit2-darwin-arm64 \
          BUILD_ROOT_DIR=${GITHUB_WORKSPACE}/libgit2/build/arm \
          TARGET_ARCH=arm64 \
          CMAKE_APPLE_SILICON_PROCESSOR=arm64 \
          ./hack/static.sh all


          LIBGIT2_SED="s;-L/Applications/Xcode_.* ;;g"
          LIBGIT2PC="${GITHUB_WORKSPACE}/build/darwin-all-libs/lib/pkgconfig/libgit2.pc"          

          # pkgconfig files may contain absolute paths to its dependencies that is specific
          # to the runner - machine used to compile the library. 
          # We need to remove the absolute path of iconv, so when the library is consumed
          # pkgconfig will automatically try to find it through the default search paths
          # on the target machine.
          if command -v gsed &> /dev/null; then 
              gsed -i "${LIBGIT2_SED}" "${LIBGIT2PC}"
          else
              sed -i "" "${LIBGIT2_SED}" "${LIBGIT2PC}"
          fi

          mkdir -p ./darwin-all-libs/lib
          mv ${GITHUB_WORKSPACE}/build/darwin-all-libs/include ./darwin-all-libs/
          mv ${GITHUB_WORKSPACE}/build/darwin-all-libs/share ./darwin-all-libs/
          mv ${GITHUB_WORKSPACE}/build/darwin-all-libs/lib/cmake ./darwin-all-libs/lib/
          mv ${GITHUB_WORKSPACE}/build/darwin-all-libs/lib/engines-3 ./darwin-all-libs/lib/
          mv ${GITHUB_WORKSPACE}/build/darwin-all-libs/lib/ossl-modules ./darwin-all-libs/lib/
          mv ${GITHUB_WORKSPACE}/build/darwin-all-libs/lib/pkgconfig ./darwin-all-libs/lib/

          libtool -static -o ./darwin-all-libs/lib/libcrypto.a \
            ${GITHUB_WORKSPACE}/build/darwin-all-libs/lib/libcrypto.a \
            ${GITHUB_WORKSPACE}/build/libgit2-darwin-arm64/lib/libcrypto.a 

          libtool -static -o ./darwin-all-libs/lib/libgit2.a \
            ${GITHUB_WORKSPACE}/build/darwin-all-libs/lib/libgit2.a \
            ${GITHUB_WORKSPACE}/build/libgit2-darwin-arm64/lib/libgit2.a 

          libtool -static -o ./darwin-all-libs/lib/libssh2.a \
            ${GITHUB_WORKSPACE}/build/darwin-all-libs/lib/libssh2.a \
            ${GITHUB_WORKSPACE}/build/libgit2-darwin-arm64/lib/libssh2.a 

          libtool -static -o ./darwin-all-libs/lib/libssl.a \
            ${GITHUB_WORKSPACE}/build/darwin-all-libs/lib/libssl.a \
            ${GITHUB_WORKSPACE}/build/libgit2-darwin-arm64/lib/libssl.a  

          libtool -static -o ./darwin-all-libs/lib/libz.a \
            ${GITHUB_WORKSPACE}/build/darwin-all-libs/lib/libz.a \
            ${GITHUB_WORKSPACE}/build/libgit2-darwin-arm64/lib/libz.a 

          tar -zcvf darwin-all-libs.tar.gz darwin-all-libs
          rm -rf ${GITHUB_WORKSPACE}/build ${GITHUB_WORKSPACE}/libgit2
        env:
          MACOSX_DEPLOYMENT_TARGET: 10.15
      - uses: actions/upload-artifact@v3
        with:
          name: release-artifact
          path: '*.tar.gz'
          if-no-files-found: error

  # similar to darwin-all-libs, but only compiles libgit2.
  darwin-libgit2-only:
    runs-on: macos-11
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build universal static libraries for Darwin - libgit2 only
        run: |
          TARGET_DIR=${GITHUB_WORKSPACE}/build/libgit2-darwin-amd64 \
          BUILD_ROOT_DIR=${GITHUB_WORKSPACE}/libgit2/build/amd \
          ./hack/static.sh build_libgit2_only

          TARGET_DIR=${GITHUB_WORKSPACE}/build/libgit2-darwin-arm64 \
          BUILD_ROOT_DIR=${GITHUB_WORKSPACE}/libgit2/build/arm \
          TARGET_ARCH=arm64 \
          CMAKE_APPLE_SILICON_PROCESSOR=arm64 \
          ./hack/static.sh build_libgit2_only

          mkdir -p ./darwin-libgit2-only/lib
          mv ${GITHUB_WORKSPACE}/build/libgit2-darwin-amd64/include ./darwin-libgit2-only/

          libtool -static -o ./darwin-libgit2-only/lib/libgit2.a \
            ${GITHUB_WORKSPACE}/build/libgit2-darwin-amd64/lib/libgit2.a \
            ${GITHUB_WORKSPACE}/build/libgit2-darwin-arm64/lib/libgit2.a

          tar -zcvf darwin-libgit2-only.tar.gz darwin-libgit2-only
          rm -rf ${GITHUB_WORKSPACE}/build ${GITHUB_WORKSPACE}/libgit2
        env:
          MACOSX_DEPLOYMENT_TARGET: 10.15
      - uses: actions/upload-artifact@v3
        with:
          name: release-artifact
          path: '*.tar.gz'
          if-no-files-found: error

  goreleaser:
    runs-on: ubuntu-latest
    needs: [linux-x86_64-all-libs, linux-x86_64-libgit2-only, darwin-all-libs, darwin-libgit2-only]
    if:  ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v3
        with:
          go-version: 1.18.x
      - name: Setup Cosign
        uses: sigstore/cosign-installer@main
      - name: Setup Syft
        uses: anchore/sbom-action/download-syft@v0
      - name: Download Files
        uses: actions/download-artifact@v3
        with:
          name: release-artifact
      - uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
